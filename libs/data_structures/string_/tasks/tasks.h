//
// Created by Dasha on 05.03.2022.
//

#ifndef MAIN_C_TASKS_H
#define MAIN_C_TASKS_H

#include <stdio.h>
#include <ctype.h>
#include <stdbool.h>
#include <assert.h>
#include "assert_string.h"
#include "../string_.h"

typedef struct WordDescriptor {
    char *begin; // –ø–æ–∑–∏—Ü–∏—è –Ω–∞—á–∞–ª–∞ —Å–ª–æ–≤–∞
    char *end; // –ø–æ–∑–∏—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞, –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–º–≤–æ–ª–∞ —Å–ª–æ–≤–∞
} WordDescriptor;

//–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏ s - –Ω–æ–ª—å-—Å–∏–º–≤–æ–ª.
char *getEndOfString(char *s);

//—É–¥–∞–ª—è–µ—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ s –≤—Å–µ –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.
void removeNonLetters(char *s);

//—Å–æ–∫—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–µ–ª–æ–≤ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è s –¥–æ –æ–¥–Ω–æ–≥–æ.
void removeExtraSpaces(char *s);

//–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 0, –µ—Å–ª–∏ —Å–ª–æ–≤–æ –Ω–µ –±—ã–ª–æ —Å—á–∏—Ç–∞–Ω–æ, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 1 –∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é word —Ç–∏–ø–∞ WordDescriptor –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞—á–∞–ª–∞ —Å–ª–æ–≤–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–µ–π—Å—è –ø–æ —É–∫–∞–∑–∞—Ç–µ–ª—é beginSearch, –∏ –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –ø–æ—Å–ª–µ –∫–æ–Ω—Ü–∞ —Å–ª–æ–≤–∞.
int getWord(char *beginSearch, WordDescriptor *word);

//–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ—Ç —Å–ª–æ–≤–æ word —Ç–∞–∫, —á—Ç–æ–±—ã —Ü–∏—Ñ—Ä—ã —Å–ª–æ–≤–∞ –±—ã–ª–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –Ω–∞—á–∞–ª–æ —Å–ª–æ–≤–∞ –∏ –∏–∑–º–µ–Ω—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Ü–∏—Ñ—Ä –≤ —Å–ª–æ–≤–µ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π, –∞ –±—É–∫–≤—ã ‚Äì –≤ –∫–æ–Ω–µ—Ü —Å–ª–æ–≤–∞, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.
void digitToStart(WordDescriptor word);

//–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –Ω–∞—á–∞–ª–æ–º –≤ beginString —Ç–∞–∫, —á—Ç–æ–±—ã –∫–∞–∂–¥–æ–≥–æ —Ü–∏—Ñ—Ä—ã —Å–ª–æ–≤–∞ –±—ã–ª–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –Ω–∞—á–∞–ª–æ —Å–ª–æ–≤–∞ –∏ –∏–∑–º–µ–Ω—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Ü–∏—Ñ—Ä –≤ —Å–ª–æ–≤–µ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π, –∞ –±—É–∫–≤—ã ‚Äì –≤ –∫–æ–Ω–µ—Ü —Å–ª–æ–≤–∞, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.
void transformStringDigitToStartInWord(char *beginString);

//–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ—Ç —Å–ª–æ–≤–æ word —Ç–∞–∫, —á—Ç–æ–±—ã —Ü–∏—Ñ—Ä—ã —Å–ª–æ–≤–∞ –±—ã–ª–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –Ω–∞—á–∞–ª–æ —Å–ª–æ–≤–∞ –∏ –∏–∑–º–µ–Ω—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Ü–∏—Ñ—Ä –≤ —Å–ª–æ–≤–µ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π, –∞ –±—É–∫–≤—ã ‚Äì –≤ –∫–æ–Ω–µ—Ü —Å–ª–æ–≤–∞, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.
void letterToStart(WordDescriptor word);

//–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã —Ü–∏—Ñ—Ä—ã –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ –±—ã–ª–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –∫–æ–Ω–µ—Ü —Å–ª–æ–≤–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏—Ö –≤ —Å–ª–æ–≤–µ, –∞ –±—É–∫–≤—ã ‚Äì –≤ –Ω–∞—á–∞–ª–æ.
void transformStringLetterToStartInWord(char *beginString);

//–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 0, –µ—Å–ª–∏ —Å–ª–æ–≤–æ –Ω–µ –±—ã–ª–æ —Å—á–∏—Ç–∞–Ω–æ, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 1 –∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é word —Ç–∏–ø–∞ WordDescriptor –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞—á–∞–ª–∞ —Å–ª–æ–≤–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–µ–π—Å—è –ø–æ —É–∫–∞–∑–∞—Ç–µ–ª—é rbegin –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–µ–π—Å—è –ø–æ —É–∫–∞–∑–∞—Ç–µ–ª—é rend –Ω–µ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ, –∏ –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –ø–æ—Å–ª–µ –∫–æ–Ω—Ü–∞ —Å–ª–æ–≤–∞.
bool getWordReverse(char *rbegin, char *rend, WordDescriptor *word);

//–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É s, –∑–∞–º–µ–Ω—è—è –∫–∞–∂–¥—É—é —Ü–∏—Ñ—Ä—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –µ–π —á–∏—Å–ª–æ–º –ø—Ä–æ–±–µ–ª–æ–≤.
void replaceDigitWithSpace(char *s);

//–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 1, –µ—Å–ª–∏ —Å–ª–æ–≤–∞ w1 –∏ w2 - –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, –∏ 0 - –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
int areWordsEqual(WordDescriptor w1, WordDescriptor w2);

//–∑–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è —Å–ª–æ–≤–∞ ùë§1 –Ω–∞ —Å–ª–æ–≤–æ ùë§2 –≤ —Å—Ç—Ä–æ–∫–µ –ø–æ —É–∫–∞–∑–∞—Ç–µ–ª—é source.
void replace ( char * source , char * w1 , char * w2 ) ;

//–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 1, –µ—Å–ª–∏ —Å–ª–æ–≤–∞ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω—ã –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏, –∏ 0 - –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
bool isLexicographicallyOrdered(char *s);


void test_tasks();

#endif //MAIN_C_TASKS_H
